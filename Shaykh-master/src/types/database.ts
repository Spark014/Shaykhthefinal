// src/types/database.ts

/**
 * Represents a Collection entity in the database.
 */
export interface Collection {
  id: string; // Typically a UUID generated by Supabase
  name: string;
  description?: string | null;
  cover_image_url?: string | null;
  language?: string | null; // e.g., 'en', 'ar'
  category?: string | null; // e.g., 'aqidah', 'ahadith'
  collection_content_type?: 'book' | 'audio' | 'video' | null; // Type of content the collection primarily holds
  created_at: string; // ISO 8601 timestamp
  updated_at?: string | null; // ISO 8601 timestamp
}

/**
 * Represents a Resource entity in the database.
 */
export interface Resource {
  id: string; // Typically a UUID
  title: string;
  description?: string | null;
  type: string; // e.g., 'pdf', 'audio', 'video', 'article'
  language: string; // e.g., 'en', 'ar'
  category: string; // e.g., 'aqidah', 'ahadith'
  tags?: string[] | null; // Array of tags
  url: string; // URL to the resource file/page
  cover_image_url?: string | null;
  collection_id?: string | null; // Foreign key to the collections table
  created_at: string; // ISO 8601 timestamp
  updated_at?: string | null; // ISO 8601 timestamp
  
  // Optional: If you often join with collections and want to include collection details directly
  collection?: {
    id: string;
    name: string;
    collection_content_type?: 'book' | 'audio' | 'video' | null;
  } | null;
}

/**
 * Represents a Question Submission entity in the database.
 */
export interface QuestionSubmission {
  id: string;
  email: string;
  category: string;
  question_text: string;
  submitted_at: string; // ISO 8601 timestamp
  status: 'pending' | 'answered' | 'rejected';
  answer_youtube_link?: string | null;
  answered_at?: string | null; // ISO 8601 timestamp for when it was answered/rejected
  rejection_reason?: string | null;
}


/*
Example usage with Supabase client:

import { supabase } from '@/lib/supabase'; // Assuming your Supabase client is exported from here

async function getCollections() {
  // When using select, Supabase infers the return type based on the query.
  // For stronger typing, you can assert the type of 'data'.
  const { data, error } = await supabase
    .from('collections') // Supabase SDK v2+ doesn't use generics on .from<Collection>()
    .select('*');

  if (error) {
    console.error('Error fetching collections:', error);
    return [];
  }
  // At this point, 'data' is of type 'any[]' or a more specific array type
  // if Supabase can infer it. You can cast it if needed:
  return data as Collection[];
}

async function getResourceWithCollection(resourceId: string) {
  const { data, error } = await supabase
    .from('resources')
    .select(`
      *,
      collection:collections (id, name)
    `)
    .eq('id', resourceId)
    .single();

  if (error) {
    console.error('Error fetching resource:', error);
    return null;
  }
  return data as Resource | null; // Cast to Resource, which includes the optional 'collection' field
}

*/
